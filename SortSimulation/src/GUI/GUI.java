/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author tuan
 */
public class GUI extends javax.swing.JFrame implements ActionListener {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        PresentStep=-1;
        play=true;
        Speed=1;
        NumberofArr=0;
        Next=false;
        Back=false;
        Stop=false;
        timer=new Timer(1000,this);
        color=bRandom.getBackground();
        Export=false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rgSpeed = new javax.swing.ButtonGroup();
        rgSort = new javax.swing.ButtonGroup();
        InitPanel = new javax.swing.JPanel();
        InitArrArea = new javax.swing.JPanel();
        LaInit = new javax.swing.JLabel();
        NumberArrField = new javax.swing.JTextField();
        bRandom = new javax.swing.JButton();
        bEnter = new javax.swing.JButton();
        ExportArea = new javax.swing.JPanel();
        LaExport = new javax.swing.JLabel();
        bExport = new javax.swing.JButton();
        ExportMess = new javax.swing.JLabel();
        ScrollCode = new javax.swing.JScrollPane();
        ShowCodeArea = new javax.swing.JTextArea();
        ScrollSort = new javax.swing.JScrollPane();
        ChooseSortArea = new javax.swing.JPanel();
        RaSelection = new javax.swing.JRadioButton();
        RaShaker = new javax.swing.JRadioButton();
        RaMerge = new javax.swing.JRadioButton();
        RaHeap = new javax.swing.JRadioButton();
        RaInsertion = new javax.swing.JRadioButton();
        RaQuick = new javax.swing.JRadioButton();
        RaBubble = new javax.swing.JRadioButton();
        SimulateArea = new javax.swing.JPanel();
        LaSimulate = new javax.swing.JLabel();
        bPlay = new javax.swing.JButton();
        LaSpeed = new javax.swing.JLabel();
        Ra1x = new javax.swing.JRadioButton();
        Ra2x = new javax.swing.JRadioButton();
        Ra4x = new javax.swing.JRadioButton();
        bNext = new javax.swing.JButton();
        bBack = new javax.swing.JButton();
        bStop = new javax.swing.JButton();
        workPlace = new javax.swing.JDesktopPane();
        lStep = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mô phỏng thuận toán sắp xếp");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        InitPanel.setBackground(new java.awt.Color(255, 255, 255));
        InitPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        InitArrArea.setBackground(new java.awt.Color(255, 255, 255));
        InitArrArea.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        InitArrArea.setFont(new java.awt.Font("Tahoma", 0, 5)); // NOI18N

        LaInit.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        LaInit.setText("Tạo mảng");

        NumberArrField.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        NumberArrField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NumberArrField.setText("Nhập số phần tử");
        NumberArrField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(51, 51, 51)));
        NumberArrField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                NumberArrFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                NumberArrFieldFocusLost(evt);
            }
        });
        NumberArrField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumberArrFieldActionPerformed(evt);
            }
        });
        NumberArrField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                NumberArrFieldKeyPressed(evt);
            }
        });

        bRandom.setBackground(new java.awt.Color(255, 255, 255));
        bRandom.setText("Random");
        bRandom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bRandomMouseClicked(evt);
            }
        });
        bRandom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRandomActionPerformed(evt);
            }
        });

        bEnter.setBackground(new java.awt.Color(255, 255, 255));
        bEnter.setText("Nhập");
        bEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEnterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout InitArrAreaLayout = new javax.swing.GroupLayout(InitArrArea);
        InitArrArea.setLayout(InitArrAreaLayout);
        InitArrAreaLayout.setHorizontalGroup(
            InitArrAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InitArrAreaLayout.createSequentialGroup()
                .addGroup(InitArrAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(InitArrAreaLayout.createSequentialGroup()
                        .addContainerGap(11, Short.MAX_VALUE)
                        .addComponent(NumberArrField, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 1, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, InitArrAreaLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(bRandom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bEnter, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(InitArrAreaLayout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(LaInit)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        InitArrAreaLayout.setVerticalGroup(
            InitArrAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InitArrAreaLayout.createSequentialGroup()
                .addComponent(LaInit)
                .addGap(17, 17, 17)
                .addComponent(NumberArrField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(InitArrAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bRandom)
                    .addComponent(bEnter))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ExportArea.setBackground(new java.awt.Color(255, 255, 255));
        ExportArea.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ExportArea.setPreferredSize(new java.awt.Dimension(141, 100));

        LaExport.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        LaExport.setText("Xuất ảnh GIF");

        bExport.setBackground(new java.awt.Color(255, 255, 255));
        bExport.setText("Xuất");
        bExport.setEnabled(false);
        bExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bExportActionPerformed(evt);
            }
        });

        ExportMess.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout ExportAreaLayout = new javax.swing.GroupLayout(ExportArea);
        ExportArea.setLayout(ExportAreaLayout);
        ExportAreaLayout.setHorizontalGroup(
            ExportAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ExportAreaLayout.createSequentialGroup()
                .addGroup(ExportAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ExportAreaLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ExportMess, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(ExportAreaLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(LaExport)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(ExportAreaLayout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(bExport)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ExportAreaLayout.setVerticalGroup(
            ExportAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ExportAreaLayout.createSequentialGroup()
                .addComponent(LaExport)
                .addGap(5, 5, 5)
                .addComponent(ExportMess, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bExport)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout InitPanelLayout = new javax.swing.GroupLayout(InitPanel);
        InitPanel.setLayout(InitPanelLayout);
        InitPanelLayout.setHorizontalGroup(
            InitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InitPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InitPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(InitArrArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ExportArea, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE))
                .addContainerGap())
        );
        InitPanelLayout.setVerticalGroup(
            InitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InitPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(InitArrArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ExportArea, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ShowCodeArea.setEditable(false);
        ShowCodeArea.setColumns(20);
        ShowCodeArea.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 13)); // NOI18N
        ShowCodeArea.setRows(5);
        ShowCodeArea.setText("C/C++ code");
        ScrollCode.setViewportView(ShowCodeArea);

        ScrollSort.setForeground(new java.awt.Color(255, 255, 255));

        ChooseSortArea.setBackground(new java.awt.Color(255, 255, 255));
        ChooseSortArea.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ChooseSortArea.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ChooseSortArea.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                ChooseSortAreaAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        RaSelection.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        RaSelection.setText("SelectionSort");
        RaSelection.setEnabled(false);
        RaSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RaSelectionActionPerformed(evt);
            }
        });

        RaShaker.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        RaShaker.setText("ShakerSort");
        RaShaker.setEnabled(false);
        RaShaker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RaShakerActionPerformed(evt);
            }
        });

        RaMerge.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        RaMerge.setText("MergeSort");
        RaMerge.setEnabled(false);
        RaMerge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RaMergeActionPerformed(evt);
            }
        });

        RaHeap.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        RaHeap.setText("HeapSort");
        RaHeap.setEnabled(false);
        RaHeap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RaHeapActionPerformed(evt);
            }
        });

        RaInsertion.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        RaInsertion.setText("InsertionSort");
        RaInsertion.setEnabled(false);
        RaInsertion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RaInsertionActionPerformed(evt);
            }
        });

        RaQuick.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        RaQuick.setText("QuickSort");
        RaQuick.setEnabled(false);
        RaQuick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RaQuickActionPerformed(evt);
            }
        });

        RaBubble.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        RaBubble.setText("BubbleSort");
        RaBubble.setEnabled(false);
        RaBubble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RaBubbleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ChooseSortAreaLayout = new javax.swing.GroupLayout(ChooseSortArea);
        ChooseSortArea.setLayout(ChooseSortAreaLayout);
        ChooseSortAreaLayout.setHorizontalGroup(
            ChooseSortAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ChooseSortAreaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ChooseSortAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RaInsertion)
                    .addComponent(RaQuick)
                    .addComponent(RaSelection)
                    .addComponent(RaBubble)
                    .addComponent(RaHeap)
                    .addComponent(RaShaker, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RaMerge))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ChooseSortAreaLayout.setVerticalGroup(
            ChooseSortAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ChooseSortAreaLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addComponent(RaSelection)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RaInsertion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RaBubble)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RaQuick)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RaShaker)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RaMerge)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RaHeap)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ScrollSort.setViewportView(ChooseSortArea);

        SimulateArea.setBackground(new java.awt.Color(255, 255, 255));
        SimulateArea.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        SimulateArea.setPreferredSize(new java.awt.Dimension(212, 218));

        LaSimulate.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        LaSimulate.setText("Điều khiển");

        bPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/playFocus.png"))); // NOI18N
        bPlay.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/playFocus.png")));
        bPlay.setBorderPainted(false);
        bPlay.setContentAreaFilled(false);
        bPlay.setEnabled(false);
        bPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPlayActionPerformed(evt);
            }
        });

        LaSpeed.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        LaSpeed.setText("Tốc độ");

        Ra1x.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        Ra1x.setSelected(true);
        Ra1x.setText("1x");
        Ra1x.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ra1xActionPerformed(evt);
            }
        });

        Ra2x.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        Ra2x.setText("2x");
        Ra2x.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ra2xActionPerformed(evt);
            }
        });

        Ra4x.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        Ra4x.setText("4x");
        Ra4x.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ra4xActionPerformed(evt);
            }
        });

        bNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/nextUnfocus.png"))); // NOI18N
        bNext.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/nextFocus.png")));
        bNext.setContentAreaFilled(false);
        bNext.setEnabled(false);
        bNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNextActionPerformed(evt);
            }
        });

        bBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/backUnfocus.png"))); // NOI18N
        bBack.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/backFocus.png")));
        bBack.setContentAreaFilled(false);
        bBack.setEnabled(false);
        bBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBackActionPerformed(evt);
            }
        });

        bStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/stopFocus.png"))); // NOI18N
        bStop.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/stopFocus.png")));
        bStop.setContentAreaFilled(false);
        bStop.setEnabled(false);
        bStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bStopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SimulateAreaLayout = new javax.swing.GroupLayout(SimulateArea);
        SimulateArea.setLayout(SimulateAreaLayout);
        SimulateAreaLayout.setHorizontalGroup(
            SimulateAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SimulateAreaLayout.createSequentialGroup()
                .addGroup(SimulateAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SimulateAreaLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(SimulateAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(bBack, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bStop, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(SimulateAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bPlay, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bNext, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(SimulateAreaLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Ra1x)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(SimulateAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LaSpeed)
                            .addGroup(SimulateAreaLayout.createSequentialGroup()
                                .addComponent(Ra2x)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Ra4x))))
                    .addGroup(SimulateAreaLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(LaSimulate)))
                .addContainerGap())
        );
        SimulateAreaLayout.setVerticalGroup(
            SimulateAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SimulateAreaLayout.createSequentialGroup()
                .addComponent(LaSimulate, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(SimulateAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bNext, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bBack, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(SimulateAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(bStop, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bPlay, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(LaSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(SimulateAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Ra1x)
                    .addComponent(Ra2x)
                    .addComponent(Ra4x))
                .addContainerGap())
        );

        bPlay.getAccessibleContext().setAccessibleDescription("");

        lStep.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N

        workPlace.setLayer(lStep, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout workPlaceLayout = new javax.swing.GroupLayout(workPlace);
        workPlace.setLayout(workPlaceLayout);
        workPlaceLayout.setHorizontalGroup(
            workPlaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, workPlaceLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lStep, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(163, 163, 163))
        );
        workPlaceLayout.setVerticalGroup(
            workPlaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, workPlaceLayout.createSequentialGroup()
                .addGap(0, 233, Short.MAX_VALUE)
                .addComponent(lStep, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jMenu2.setText("Hướng dẫn");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Tác giả");
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu3);

        jMenu4.setText("Thoát");
        jMenu4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu4MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(workPlace)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(InitPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SimulateArea, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ScrollSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ScrollCode, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(InitPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ScrollCode)
                    .addComponent(SimulateArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ScrollSort, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(workPlace)
                .addGap(13, 13, 13))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NumberArrFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NumberArrFieldActionPerformed
        
    }//GEN-LAST:event_NumberArrFieldActionPerformed

    private void bRandomMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bRandomMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_bRandomMouseClicked

    private void bEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEnterActionPerformed
        Stop=false;
        workPlace.removeAll();
        workPlace.updateUI();
        workPlace.add(lStep);
        lStep.setText("Step: 0");
        rgSort.clearSelection();
        ShowCodeArea.setText("Show code area");
        PresentStep=-1;
        bNext.setEnabled(false);
        bPlay.setEnabled(false);
        bBack.setEnabled(false);
        bStop.setEnabled(false);
        try
        {
            NumberofArr = Integer.parseInt(NumberArrField.getText());
            bElement= new javax.swing.JButton[NumberofArr];
            if(NumberofArr<15&&NumberofArr>0)
            {
                for(int i=0;i<NumberofArr;i++)
                {
                    bElement[i]=new javax.swing.JButton();
                    bElement[i].setVisible(false);
                    bElement[i].setText("0");
                    bElement[i].setFont(new java.awt.Font("Times New Roman",1,20));
                    if(i==0)
                        bElement[i].setBounds(10,130,50, 40);                
                    else
                        bElement[i].setBounds((int)bElement[i-1].getLocation().getX()+50,130,50,40);
                    bElement[i].addActionListener(new java.awt.event.ActionListener() 
                                                      {
                                                        public void actionPerformed(java.awt.event.ActionEvent evt)
                                                        {
                                                            bElementActionPerformed(evt);
                                                        }
                                                      });
                    workPlace.add(bElement[i]);

                    bElement[i].setVisible(true);

                }
                orgElement=new JLabel[NumberofArr];
                for(int i=0;i<NumberofArr;i++)
                {
                    orgElement[i] = new javax.swing.JLabel();
                    orgElement[i].setFont(new java.awt.Font("Times New Roman",1,20));
                    orgElement[i].setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                    orgElement[i].setText(bElement[i].getText());
                    orgElement[i].setBorder(javax.swing.BorderFactory.createEtchedBorder());
                    orgElement[i].setBounds(bElement[i].getX(),bElement[i].getY()-100,50, 40);
                    workPlace.add(orgElement[i]);
                }
                RaBubble.setEnabled(true);
                RaHeap.setEnabled(true);
                RaInsertion.setEnabled(true);
                RaMerge.setEnabled(true);
                RaQuick.setEnabled(true);
                RaSelection.setEnabled(true);
                RaShaker.setEnabled(true);
            }else
            {
                lStep.setText("");
                rgSort.clearSelection();
                ShowCodeArea.setText("Show code area");
                RaBubble.setEnabled(false);
                RaHeap.setEnabled(false);
                RaInsertion.setEnabled(false);
                RaMerge.setEnabled(false);
                RaQuick.setEnabled(false);
                RaSelection.setEnabled(false);
                RaShaker.setEnabled(false);
                NumberofArr=0;
                ErrorNumberArray errorNumberArr = new ErrorNumberArray("Bạn phải nhập từ 0-14");
                errorNumberArr.setVisible(false);
                errorNumberArr.setLocation(300,50);
                errorNumberArr.setVisible(true);
                workPlace.add(errorNumberArr);
                bExport.setEnabled(false);
            }
            
        } catch (NumberFormatException e)
        {
            lStep.setText("");
            NumberofArr=0;
            ErrorNumberArray errorNumberArr = new ErrorNumberArray("Bạn phải nhập một số");
            errorNumberArr.setVisible(false);
            errorNumberArr.setLocation(300,50);
            errorNumberArr.setVisible(true);
            workPlace.add(errorNumberArr);
            bExport.setEnabled(false);
        }   

    }//GEN-LAST:event_bEnterActionPerformed
    private void bElementActionPerformed(java.awt.event.ActionEvent evt) {                                        
        if(PresentStep==-1)
        {
            JButton jbutton= (JButton) evt.getSource();
            JLabel jlabel= (JLabel)workPlace.getComponentAt(jbutton.getX(),jbutton.getY()-70);
            InitElementArray initElementArr = new InitElementArray(jbutton,jlabel);
            initElementArr.setVisible(false);
            initElementArr.setLocation(200,50);
            initElementArr.setVisible(true);
            workPlace.add(initElementArr);
            initElementArr.moveToFront();
        }       
    }                                           
    private void bExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bExportActionPerformed
        
        Timer t1 =new Timer(50,new ActionListener() {
            int i=0;
            @Override
            public void actionPerformed(ActionEvent e) {              
                if(i==0){
                    Export=true;
                    ExportMess.setText("Đang tiến hành...");
                    bStop.doClick();
                    bExport.setEnabled(false);
                }               
                if (i==2)
                {
                    exporttoGIF=new ExporttoGIF(Speed);
                    bPlay.doClick();
                    bPlay.setEnabled(false);
                    bStop.setEnabled(false);
                    Timer t=(Timer)e.getSource();
                    t.stop();
                }
                i++;
            }
        });
        t1.start();
        
    }//GEN-LAST:event_bExportActionPerformed

    private void Ra2xActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ra2xActionPerformed
        Speed=2;
    }//GEN-LAST:event_Ra2xActionPerformed

    private void NumberArrFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_NumberArrFieldFocusGained
        if (NumberArrField.getText().equals("Nhập số phần tử"))
        {
            NumberArrField.setText("");
            NumberArrField.setFont(new java.awt.Font("Times New Roman",0,16));
        }
        
    }//GEN-LAST:event_NumberArrFieldFocusGained

    private void NumberArrFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_NumberArrFieldFocusLost
        if (NumberArrField.getText().equals(""))
        {
            NumberArrField.setText("Nhập số phần tử");
            NumberArrField.setFont(new java.awt.Font("Tahoma",2, 10));
        }
    }//GEN-LAST:event_NumberArrFieldFocusLost

    private void bRandomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRandomActionPerformed
        Stop=false;
        workPlace.removeAll();
        workPlace.add(lStep);
        lStep.setText("Step: 0");
        rgSort.clearSelection();
        ShowCodeArea.setText("Show code area");
        workPlace.updateUI();
        bNext.setEnabled(false);
        bPlay.setEnabled(false);
        bBack.setEnabled(false);
        bStop.setEnabled(false);
        PresentStep=-1;
        try
        {
            NumberofArr = Integer.parseInt(NumberArrField.getText());
            bElement= new javax.swing.JButton[NumberofArr];
            if(NumberofArr<15&&NumberofArr>0)
            {
                for(int i=0;i<NumberofArr;i++)
                {
                    bElement[i]=new javax.swing.JButton();
                    bElement[i].setVisible(false);
                    Random rd = new Random();
                    bElement[i].setText(Integer.toString(rd.nextInt(100)));
                    bElement[i].setFont(new java.awt.Font("Times New Roman",1,20));
                    if(i==0)
                        bElement[i].setBounds(10,130,50, 40);                
                    else
                        bElement[i].setBounds((int)bElement[i-1].getLocation().getX()+50,130,50,40);
                    bElement[i].addActionListener(new java.awt.event.ActionListener() 
                                                      {
                                                        public void actionPerformed(java.awt.event.ActionEvent evt)
                                                        {
                                                            bElementActionPerformed(evt);
                                                        }
                                                      });
                    workPlace.add(bElement[i]);

                    bElement[i].setVisible(true);
                   
                }
                color=bElement[0].getBackground();
                orgElement= new JLabel[NumberofArr];
                for(int i=0;i<NumberofArr;i++)
                {
                    orgElement[i] = new javax.swing.JLabel();
                    orgElement[i].setFont(new java.awt.Font("Times New Roman",1,20));
                    orgElement[i].setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                    orgElement[i].setText(bElement[i].getText());
                    orgElement[i].setBorder(javax.swing.BorderFactory.createEtchedBorder());
                    orgElement[i].setBounds(bElement[i].getX(),bElement[i].getY()-100,50, 40);
                    workPlace.add(orgElement[i]);
                }
                RaBubble.setEnabled(true);
                RaHeap.setEnabled(true);
                RaInsertion.setEnabled(true);
                RaMerge.setEnabled(true);
                RaQuick.setEnabled(true);
                RaSelection.setEnabled(true);
                RaShaker.setEnabled(true);
            }else
            {
                rgSort.clearSelection();
                ShowCodeArea.setText("Show code area");
                RaBubble.setEnabled(false);
                RaHeap.setEnabled(false);
                RaInsertion.setEnabled(false);
                RaMerge.setEnabled(false);
                RaQuick.setEnabled(false);
                RaSelection.setEnabled(false);
                RaShaker.setEnabled(false);
                NumberofArr=0;
                ErrorNumberArray errorNumberArr = new ErrorNumberArray("Bạn phải nhập từ 0-14");
                errorNumberArr.setVisible(false);
                errorNumberArr.setLocation(300,50);
                errorNumberArr.setVisible(true);
                workPlace.add(errorNumberArr);
                bExport.setEnabled(false);
                lStep.setText("");
            }
            
        } catch (NumberFormatException e)
        {
            lStep.setText("");
            NumberofArr=0;
            ErrorNumberArray errorNumberArr = new ErrorNumberArray("Bạn phải nhập một số");
            errorNumberArr.setVisible(false);
            errorNumberArr.setLocation(300,50);
            errorNumberArr.setVisible(true);
            workPlace.add(errorNumberArr);
            bExport.setEnabled(false);
            
        }
    
    }//GEN-LAST:event_bRandomActionPerformed

    private void Ra1xActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ra1xActionPerformed
        Speed=1;
    }//GEN-LAST:event_Ra1xActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        rgSpeed.add(Ra1x);
        rgSpeed.add(Ra2x);
        rgSpeed.add(Ra4x);
        rgSort.add(RaBubble);
        rgSort.add(RaHeap);
        rgSort.add(RaInsertion);
        rgSort.add(RaMerge);
        rgSort.add(RaQuick);
        rgSort.add(RaSelection);
        rgSort.add(RaShaker);
        
    }//GEN-LAST:event_formWindowOpened

    private void bPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPlayActionPerformed
        Stop=false;
        RaBubble.setEnabled(false);
        RaHeap.setEnabled(false);
            RaInsertion.setEnabled(false);
            RaMerge.setEnabled(false);
            RaQuick.setEnabled(false);
            RaSelection.setEnabled(false);
            RaShaker.setEnabled(false);
            bEnter.setEnabled(false);
            bRandom.setEnabled(false);
        if(play){
            bPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/pauseUnfocus.png")));
            bPlay.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/pauseFocus.png")));
            play=false;
            timer.setDelay(1000/Speed);
            timer.start();
            //bExport.setEnabled(false);
            bBack.setEnabled(false);
            bNext.setEnabled(false);
            Ra1x.setEnabled(false);
            Ra2x.setEnabled(false);
            Ra4x.setEnabled(false);
        } else 
        {
            //bExport.setEnabled(true);
            bPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/playUnfocus.png")));
            bPlay.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/playFocus.png")));
            timer.stop();
            play=true;
            if(PresentStep<Step)
                bNext.setEnabled(true);
            if(PresentStep>-1)
                bBack.setEnabled(true);
            Ra1x.setEnabled(true);
            Ra2x.setEnabled(true);
            Ra4x.setEnabled(true);
        }
        bStop.setEnabled(true);


    }//GEN-LAST:event_bPlayActionPerformed

    private void Ra4xActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ra4xActionPerformed
        Speed=4;
    }//GEN-LAST:event_Ra4xActionPerformed

    private void bNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNextActionPerformed
        Stop=false;
        Next=true;
        timer.setDelay(1000/Speed);
        
        timer.start();
        if(PresentStep==Step)
        {
            bNext.setEnabled(false);
        }
        bBack.setEnabled(true);
        RaBubble.setEnabled(false);
        RaHeap.setEnabled(false);
        RaInsertion.setEnabled(false);
        RaMerge.setEnabled(false);
        RaQuick.setEnabled(false);
        RaSelection.setEnabled(false);
        RaShaker.setEnabled(false);
        bEnter.setEnabled(false);
        bRandom.setEnabled(false);
        bStop.setEnabled(true);
        
    }//GEN-LAST:event_bNextActionPerformed

    private void bBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBackActionPerformed
        Back=true;
        Stop=false;
        if(PresentStep==Step)
            PresentStep-=2;
        else PresentStep--;
        
        timer.setDelay(1000/Speed);
        timer.start();
        if(PresentStep==-1)
        {
            bBack.setEnabled(false);
            RaBubble.setEnabled(true);
            RaHeap.setEnabled(true);
            RaInsertion.setEnabled(true);
            RaMerge.setEnabled(true);
            RaQuick.setEnabled(true);
            RaSelection.setEnabled(true);
            RaShaker.setEnabled(true);
            bEnter.setEnabled(true);
            bRandom.setEnabled(true);

        }
        bNext.setEnabled(true);
        bStop.setEnabled(true);
    }//GEN-LAST:event_bBackActionPerformed

    private void bStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bStopActionPerformed
        timer.stop();
        Stop=true;
        lStep.setText("Step: 0");
        bExport.setEnabled(true);
        for(int i=0;i<NumberofArr;i++)
        {
            bElement[i].setText(orgElement[i].getText());
            if(i==0)
                        bElement[i].setBounds(10,130,50, 40);                
                    else
                        bElement[i].setBounds((int)bElement[i-1].getLocation().getX()+50,130,50,40);
            bElement[i].setBackground(color);
        }
        PresentStep=-1;
        bPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/playUnfocus.png")));
        bPlay.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/playFocus.png")));
        play=true;
        bPlay.setEnabled(true);
        bNext.setEnabled(true);
        bBack.setEnabled(false);
        bRandom.setEnabled(true);
        bEnter.setEnabled(true);
        bBack.setEnabled(false);
        RaBubble.setEnabled(true);
        RaHeap.setEnabled(true);
        RaInsertion.setEnabled(true);
        RaMerge.setEnabled(true);
        RaQuick.setEnabled(true);
        RaSelection.setEnabled(true);
        RaShaker.setEnabled(true);
        bEnter.setEnabled(true);
        bRandom.setEnabled(true);
        Ra1x.setEnabled(true);
        Ra2x.setEnabled(true);
        Ra4x.setEnabled(true);
        
        
    }//GEN-LAST:event_bStopActionPerformed

    private void NumberArrFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NumberArrFieldKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
            bEnter.doClick();
    }//GEN-LAST:event_NumberArrFieldKeyPressed

    private void ChooseSortAreaAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_ChooseSortAreaAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_ChooseSortAreaAncestorAdded

    private void RaBubbleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RaBubbleActionPerformed
        PresentStep=-1;
        arr = new int[NumberofArr];
        for (int i=0; i< NumberofArr;i++)
        arr[i]=Integer.parseInt(bElement[i].getText());
        Sort bubble=new Sort(NumberofArr);
        Steptable= new int[3][100];
        Steptable=bubble.BubbleSort(arr);
        Step=bubble.getStep();
        bNext.setEnabled(true);
        bPlay.setEnabled(true);
        //bBack.setEnabled(true);
        bExport.setEnabled(true);
        ShowCodeArea.setText("int k;\nfor (int j = arr.length; j >= 0; j--) {\n        for (int i = 0; i < arr.length - 1; i++) {\n                k = i + 1;\n                if (arr[i] > arr[k]) \n                    Swap(arr[i], arr[k]);\n            }\n}");
    }//GEN-LAST:event_RaBubbleActionPerformed

    private void RaQuickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RaQuickActionPerformed
        PresentStep=-1;
        arr = new int[NumberofArr];
        for (int i=0; i< NumberofArr;i++)
        arr[i]=Integer.parseInt(bElement[i].getText());
        Sort quick=new Sort(NumberofArr);
        Steptable= new int[3][100];
        Steptable=quick.QuickSort(arr,0,NumberofArr-1);
        Step=quick.getStep();
        bNext.setEnabled(true);
        bPlay.setEnabled(true);
        //bBack.setEnabled(true);
        bExport.setEnabled(true);
        ShowCodeArea.setText("public void QuickSort(int arr[], int left, int right)\n{\n        int i = left, j = right;\n        int pivot = arr[(left + right) / 2];\n        while (i <= j) {\n            while (arr[i] < pivot)\n                  i++;\n            while (arr[j] > pivot)\n                  j--;\n            if (i <= j) {\n                  swap(arr[i],arr[j]);\n                  i++;\n                  j--;\n            }\n        }\n        if (left < i - 1)\n            QuickSort(arr, left, i - 1);\n        if (i < right)\n            QuickSort(arr, i, right);\n}");
    }//GEN-LAST:event_RaQuickActionPerformed

    private void RaInsertionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RaInsertionActionPerformed

        arr = new int[NumberofArr];
        for (int i=0; i< NumberofArr;i++)
        arr[i]=Integer.parseInt(bElement[i].getText());
        Sort inser=new Sort(NumberofArr);
        Steptable= new int[3][100];
        Steptable=inser.InsertionSort(arr);
        Step=inser.getStep();
        bNext.setEnabled(true);
        bPlay.setEnabled(true);
        //bBack.setEnabled(true);
        ShowCodeArea.setText("int temp;\nfor (int i = 1; i < arr.length; i++) {\n                for(int j = i ; j > 0 ; j--){\n                       if(arr[j] < arr[j-1])\n                               swap(arr[j],arr[j-1]);\n                }\n}");
        bExport.setEnabled(true);
    }//GEN-LAST:event_RaInsertionActionPerformed

    private void RaShakerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RaShakerActionPerformed
        PresentStep=-1;
        arr = new int[NumberofArr];
        for (int i=0; i< NumberofArr;i++)
        arr[i]=Integer.parseInt(bElement[i].getText());
        Sort shaker=new Sort(NumberofArr);

        Steptable= new int[3][100];
        Steptable=shaker.ShakerSort(arr);
        Step=shaker.getStep();

        bNext.setEnabled(true);
        bPlay.setEnabled(true);
        //bBack.setEnabled(true);
        bExport.setEnabled(true);
        ShowCodeArea.setText("for (int i = 0; i < arr.length/2; i++) {\n\tboolean swapped = false;\n\tfor (int j = i; j < arr.length - i - 1; j++) {\n\t\tif (arr[j] > arr[j+1]) {\n                    Swap(arr[j], arr[j+1]);\n                    swapped = true;\n                }\n            }\n            for (int j = arr.length - 2 - i; j > i; j--) {\n                if (arr[j] < arr[j-1]) {\n                    Swap(arr[j], arr[j-1]);\n                    swapped = true;\n                }\n            }\n            if(!swapped) break;\n}");
    }//GEN-LAST:event_RaShakerActionPerformed

    private void RaSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RaSelectionActionPerformed
        PresentStep=-1;
        arr = new int[NumberofArr];
        for (int i=0; i< NumberofArr;i++)
        arr[i]=Integer.parseInt(bElement[i].getText());
        Sort selec=new Sort(NumberofArr);
        Steptable= new int[3][100];
        Steptable=selec.SelectionSort(arr);
        Step=selec.getStep();

        bNext.setEnabled(true);
        bPlay.setEnabled(true);
        //bBack.setEnabled(true);
        bExport.setEnabled(true);
        ShowCodeArea.setText("for (int i = 0; i < arr.length - 1; i++)\n        {\n            int index = i;\n            for (int j = i + 1; j < arr.length; j++)\n                if (arr[j] < arr[index])\n                    index = j;\n                  swap(arr[index],arr[i]);\n        }");
    }//GEN-LAST:event_RaSelectionActionPerformed

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        // TODO add your handling code here:
        JFrame hd = new Instruction();
        hd.setTitle("Hướng dẫn");
        hd.getContentPane().setBackground(color.white);
        hd.setVisible(true);
    }//GEN-LAST:event_jMenu2MouseClicked

    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        // TODO add your handling code here:
        JFrame au = new Author();
        au.setTitle("Tác giả");
        au.getContentPane().setBackground(color.white);
        au.setVisible(true);
    }//GEN-LAST:event_jMenu3MouseClicked

    private void jMenu4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu4MouseClicked
        // TODO add your handling code here:
        int dialogButton = JOptionPane.showConfirmDialog(null,
                "Bạn có chắc chắn muốn thoát?", 
                "Warning", JOptionPane.OK_CANCEL_OPTION);
        if(dialogButton == JOptionPane.OK_OPTION)
        {
            System.exit(0);
        }
    }//GEN-LAST:event_jMenu4MouseClicked

    private void RaMergeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RaMergeActionPerformed
        PresentStep=-1;
        bNext.setEnabled(true);
        bPlay.setEnabled(true);
        //bBack.setEnabled(true);
    }//GEN-LAST:event_RaMergeActionPerformed

    private void RaHeapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RaHeapActionPerformed
        PresentStep=-1;
        bNext.setEnabled(true);
        bPlay.setEnabled(true);
        //bBack.setEnabled(true);
    }//GEN-LAST:event_RaHeapActionPerformed

    
        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
            
            
        });
    }
    public javax.swing.JButton[] bElement;
    private javax.swing.JLabel[] orgElement;
    private int NumberofArr;
    private int Step;
    private int[][] Steptable;
    private int[] arr;
    private int Speed;
    private Timer timer;
    public int PresentStep;
    boolean play;
    boolean Next;
    boolean Back;
    private static boolean Stop;
    Color color;
    private static boolean Export;
    private ExporttoGIF exporttoGIF;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ChooseSortArea;
    private javax.swing.JPanel ExportArea;
    private javax.swing.JLabel ExportMess;
    private javax.swing.JPanel InitArrArea;
    private javax.swing.JPanel InitPanel;
    private javax.swing.JLabel LaExport;
    private javax.swing.JLabel LaInit;
    private javax.swing.JLabel LaSimulate;
    private javax.swing.JLabel LaSpeed;
    private javax.swing.JTextField NumberArrField;
    private javax.swing.JRadioButton Ra1x;
    private javax.swing.JRadioButton Ra2x;
    private javax.swing.JRadioButton Ra4x;
    private javax.swing.JRadioButton RaBubble;
    private javax.swing.JRadioButton RaHeap;
    private javax.swing.JRadioButton RaInsertion;
    private javax.swing.JRadioButton RaMerge;
    private javax.swing.JRadioButton RaQuick;
    private javax.swing.JRadioButton RaSelection;
    private javax.swing.JRadioButton RaShaker;
    private javax.swing.JScrollPane ScrollCode;
    private javax.swing.JScrollPane ScrollSort;
    private javax.swing.JTextArea ShowCodeArea;
    private javax.swing.JPanel SimulateArea;
    private javax.swing.JButton bBack;
    private javax.swing.JButton bEnter;
    private javax.swing.JButton bExport;
    private javax.swing.JButton bNext;
    private javax.swing.JButton bPlay;
    private javax.swing.JButton bRandom;
    private javax.swing.JButton bStop;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel lStep;
    private javax.swing.ButtonGroup rgSort;
    private javax.swing.ButtonGroup rgSpeed;
    public static javax.swing.JDesktopPane workPlace;
    // End of variables declaration//GEN-END:variables


public void actionPerformed(ActionEvent e)
{
    PresentStep++;
    
    if (PresentStep==Step)
    {
        lStep.setText("Step: Completed !! Total step: "+PresentStep);
        bElement[Steptable[0][PresentStep-1]].setBackground(color);
        bElement[Steptable[1][PresentStep-1]].setBackground(color);
        bPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/playUnfocus.png")));
        bPlay.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/playFocus.png")));
        play=true;
        bPlay.setEnabled(false);
        bNext.setEnabled(false);
        bRandom.setEnabled(true);
        bEnter.setEnabled(true);
        if(!Back)
            timer.stop();
        if (Export)
        {
            for(int i=0;i<=10;i++)
                exporttoGIF.addF(Screenshot.capturePanel(workPlace));
            Export=false;
            ExportMess.setText("Export completed !");
            bStop.setEnabled(true);
            exporttoGIF.finish();
        }
    } else {
        
        if (Back)
        {
            
            if(Steptable[2][PresentStep]!=1&&PresentStep>0)
            {
                if(bElement[Steptable[0][PresentStep]].getBackground()!=color&&bElement[Steptable[1][PresentStep]].getBackground()!=color)
                {   
                    bElement[Steptable[0][PresentStep+1]].setBackground(color);
                    bElement[Steptable[1][PresentStep+1]].setBackground(color); 
                    PresentStep--;
                
                }
            }
            else
            {
                bElement[Steptable[0][PresentStep+1]].setBackground(color);
                bElement[Steptable[1][PresentStep+1]].setBackground(color);
            }
            
                
        }
        if(PresentStep!=0)
        {
            bElement[Steptable[0][PresentStep-1]].setBackground(color);
            bElement[Steptable[1][PresentStep-1]].setBackground(color);
        }
        JButton button1=bElement[Steptable[0][PresentStep]];
        JButton button2=bElement[Steptable[1][PresentStep]];
        button1.setBackground(new java.awt.Color(102, 255, 102));
        button2.setBackground(new java.awt.Color(102, 255, 102));
        if(Steptable[2][PresentStep]==1)
        {
            timer.removeActionListener(this);
            if(button1.getX()<button2.getX())
            {
                SwapButton swap=new SwapButton(timer,this,button1,button2);
                swap.Swap(Speed);
                
                
            }else
            {
                SwapButton swap=new SwapButton(timer,this,button2,button1);
                swap.Swap(Speed);
                
            }          
            repaint();
        }
        if(Next)
        {
          timer.stop();
          Next=false;
        }
        else
        if (Back){
          PresentStep--;   
          if(PresentStep!=-1)
              timer.stop();
          Back=false;
          
        } else
            if(PresentStep==0&&play)
            {
                bElement[Steptable[0][PresentStep]].setBackground(color);
                bElement[Steptable[1][PresentStep]].setBackground(color);
                timer.stop();
                PresentStep--;
            }
        lStep.setText("Step: "+(PresentStep+1));
    }
  
}
    public static boolean getStop()
    {
        return Stop;
    }
    public static void setStop(boolean stop)
    {
        Stop=stop;
    }
}